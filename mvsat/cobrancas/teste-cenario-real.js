// TESTE DO CEN√ÅRIO REAL - Fatura 30/09 paga em 27/08
// Este teste simula exatamente o que est√° acontecendo no sistema

console.log('üß™ TESTE DO CEN√ÅRIO REAL');
console.log('==========================');
console.log('Cen√°rio: Fatura vence 30/09, paga em 27/08');
console.log('Problema: Pr√≥xima fatura sendo gerada para 26/10 (INCORRETO)');
console.log('Solu√ß√£o: Deveria ser 30/10 (CORRETO)');
console.log('');

// Simular a fun√ß√£o computeNextDueDateKeepingDay corrigida
function computeNextDueDateKeepingDay(currentDue) {
  console.log('üîç [COMPUTE DATE] Calculando pr√≥xima data a partir de:', currentDue.toLocaleDateString('pt-BR'));
  
  const currentDay = currentDue.getDate();
  const currentMonth = currentDue.getMonth();
  const currentYear = currentDue.getFullYear();
  
  console.log('üîç [COMPUTE DATE] Data decomposta:', {
    dia: currentDay,
    mes: currentMonth + 1,
    ano: currentYear
  });
  
  let nextMonth = currentMonth + 1;
  let nextYear = currentYear;
  
  if (nextMonth > 11) {
    nextMonth = 0;
    nextYear += 1;
  }
  
  // Obter √∫ltimo dia do pr√≥ximo m√™s
  const lastDayNextMonth = new Date(nextYear, nextMonth + 1, 0).getDate();
  let day = currentDay; // SEMPRE manter o dia original da fatura
  
  // L√ìGICA CORRETA: Regras especiais para fevereiro e dia 31
  if (nextMonth === 1) { // Fevereiro (m√™s 1, √≠ndice 0)
    // Em fevereiro, sempre usar o √∫ltimo dia do m√™s
    day = lastDayNextMonth;
    console.log('üîç [COMPUTE DATE] Fevereiro detectado - usando √∫ltimo dia:', day);
  } else if (currentDay === 31) {
    // Se o dia original √© 31, NUNCA usar 31 (exceto em fevereiro)
    // Usar o √∫ltimo dia do pr√≥ximo m√™s
    day = lastDayNextMonth;
    console.log('üîç [COMPUTE DATE] Dia 31 detectado - usando √∫ltimo dia do pr√≥ximo m√™s:', day);
  } else if (currentDay > lastDayNextMonth) {
    // Se o dia original n√£o existe no pr√≥ximo m√™s, usar o √∫ltimo dia dispon√≠vel
    day = lastDayNextMonth;
    console.log('üîç [COMPUTE DATE] Dia original n√£o existe no pr√≥ximo m√™s - usando √∫ltimo dia:', day);
  }
  
  const result = new Date(nextYear, nextMonth, day);
  
  console.log('‚úÖ [COMPUTE DATE] Resultado:', result.toLocaleDateString('pt-BR'));
  console.log('üîç [COMPUTE DATE] Regra aplicada:', 
    nextMonth === 1 ? 'Fevereiro - √∫ltimo dia' : 
    currentDay === 31 ? 'Dia 31 - √∫ltimo dia dispon√≠vel' : 
    currentDay > lastDayNextMonth ? 'Dia n√£o existe - √∫ltimo dia' : 
    'Mant√©m dia original'
  );
  
  return result;
}

// SIMULAR O CEN√ÅRIO REAL
console.log('üìã SIMULA√á√ÉO DO CEN√ÅRIO REAL:');
console.log('================================');

// 1. Fatura original
const faturaOriginal = {
  vencimento: new Date(2024, 8, 30), // 30/09/2024
  data_vencimento: '2024-09-30',
  cliente_nome: 'Cliente Teste'
};

console.log('üìÖ Fatura original:');
console.log(`   Vencimento: ${faturaOriginal.vencimento.toLocaleDateString('pt-BR')}`);
console.log(`   Campo vencimento: ${faturaOriginal.vencimento.toLocaleDateString('pt-BR')}`);
console.log(`   Campo data_vencimento: ${faturaOriginal.data_vencimento}`);
console.log('');

// 2. Data de pagamento (N√ÉO DEVE SER CONSIDERADA)
const dataPagamento = new Date(2024, 7, 27); // 27/08/2024
console.log('üí∞ Data de pagamento:');
console.log(`   Pago em: ${dataPagamento.toLocaleDateString('pt-BR')}`);
console.log(`   ‚ö†Ô∏è  IMPORTANTE: Esta data N√ÉO deve ser considerada!`);
console.log('');

// 3. Calcular pr√≥xima fatura usando a l√≥gica CORRETA
console.log('üéØ C√°lculo da pr√≥xima fatura:');
console.log('=============================');

// SEMPRE usar a data de vencimento original, NUNCA a data de pagamento
const dataVencimentoOriginal = faturaOriginal.vencimento;
console.log('‚úÖ Usando data de vencimento original:', dataVencimentoOriginal.toLocaleDateString('pt-BR'));

const proximaFatura = computeNextDueDateKeepingDay(dataVencimentoOriginal);
console.log('');

// 4. Resultado
console.log('üìä RESULTADO:');
console.log('=============');
console.log(`Fatura original: ${faturaOriginal.vencimento.toLocaleDateString('pt-BR')}`);
console.log(`Data de pagamento: ${dataPagamento.toLocaleDateString('pt-BR')} (N√ÉO CONSIDERADA)`);
console.log(`Pr√≥xima fatura: ${proximaFatura.toLocaleDateString('pt-BR')}`);

// Verificar se est√° correto
const esperado = new Date(2024, 9, 30); // 30/10/2024
const correto = proximaFatura.getTime() === esperado.getTime();

console.log('');
console.log(correto ? '‚úÖ CORRETO!' : '‚ùå INCORRETO!');
console.log(`Esperado: ${esperado.toLocaleDateString('pt-BR')}`);
console.log(`Obtido: ${proximaFatura.toLocaleDateString('pt-BR')}`);

if (correto) {
  console.log('');
  console.log('üéâ PROBLEMA RESOLVIDO!');
  console.log('A pr√≥xima fatura agora ser√° gerada para 30/10 (mesmo dia do m√™s)');
  console.log('em vez de 26/10 (data incorreta).');
} else {
  console.log('');
  console.log('üö® PROBLEMA PERSISTE!');
  console.log('A corre√ß√£o n√£o est√° funcionando corretamente.');
}

console.log('');
console.log('üí° EXPLICA√á√ÉO:');
console.log('==============');
console.log('‚úÖ A fun√ß√£o agora SEMPRE usa a data de vencimento original (30/09)');
console.log('‚ùå A data de pagamento (27/08) NUNCA √© considerada');
console.log('üìÖ A pr√≥xima fatura mant√©m o mesmo dia (30) do m√™s seguinte (10)');
console.log('üéØ Resultado: 30/09 ‚Üí 30/10 (CORRETO)');
