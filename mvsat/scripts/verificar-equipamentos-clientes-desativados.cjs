const { initializeApp } = require('firebase/app');
const { getFirestore, collection, getDocs, query, where, writeBatch, doc, getDoc } = require('firebase/firestore');

// Configura√ß√£o do Firebase (substitua pelos seus dados)
const firebaseConfig = {
  // Suas configura√ß√µes aqui
};

// Inicializa Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

/**
 * Script para verificar e corrigir equipamentos de clientes desativados
 * Este script:
 * 1. Identifica clientes com status 'desativado'
 * 2. Verifica se eles ainda t√™m equipamentos associados
 * 3. Libera automaticamente esses equipamentos
 */
async function verificarEquipamentosClientesDesativados() {
  try {
    console.log('üîç Iniciando verifica√ß√£o de equipamentos de clientes desativados...\n');
    
    // 1. Busca todos os clientes desativados
    console.log('üìã Buscando clientes desativados...');
    const clientesQuery = query(
      collection(db, 'clientes'),
      where('status', '==', 'desativado')
    );
    
    const clientesSnap = await getDocs(clientesQuery);
    const clientesDesativados = clientesSnap.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
    
    console.log(`‚úÖ Encontrados ${clientesDesativados.length} clientes desativados\n`);
    
    if (clientesDesativados.length === 0) {
      console.log('‚ÑπÔ∏è Nenhum cliente desativado encontrado. Nada a fazer.');
      return;
    }
    
    let totalEquipamentosLiberados = 0;
    let totalTvBoxesLiberadas = 0;
    
    // 2. Para cada cliente desativado, verifica equipamentos
    for (const cliente of clientesDesativados) {
      console.log(`üîç Verificando equipamentos do cliente: ${cliente.nome || cliente.nomeCompleto || 'Sem nome'} (ID: ${cliente.id})`);
      
      // Busca equipamentos associados
      const equipamentosQuery = query(
        collection(db, 'equipamentos'),
        where('cliente_id', '==', cliente.id)
      );
      
      const equipamentosSnap = await getDocs(equipamentosQuery);
      
      // Busca TV Boxes associadas
      const tvboxQuery = query(
        collection(db, 'tvbox'),
        where('cliente_id', '==', cliente.id)
      );
      
      const tvboxSnap = await getDocs(tvboxQuery);
      
      if (equipamentosSnap.empty && tvboxSnap.empty) {
        console.log(`  ‚ÑπÔ∏è Nenhum equipamento encontrado para este cliente`);
        continue;
      }
      
      // 3. Libera equipamentos se encontrados
      const batch = writeBatch(db);
      
      // Libera equipamentos
      equipamentosSnap.docs.forEach((equipamentoDoc) => {
        batch.update(equipamentoDoc.ref, {
          cliente_id: null,
          cliente_nome: null,
          status: 'disponivel',
          dataUltimaAtualizacao: new Date(),
          cliente_anterior: cliente.nome || cliente.nomeCompleto || 'Cliente sem nome',
          data_desativacao_cliente: new Date(),
          observacao: 'Liberado automaticamente - cliente desativado'
        });
      });
      
      // Libera TV Boxes
      tvboxSnap.docs.forEach((tvboxDoc) => {
        batch.update(tvboxDoc.ref, {
          cliente_id: null,
          cliente_nome: null,
          status: 'disponivel',
          dataUltimaAtualizacao: new Date(),
          cliente_anterior: cliente.nome || cliente.nomeCompleto || 'Cliente sem nome',
          data_desativacao_cliente: new Date(),
          observacao: 'Liberado automaticamente - cliente desativado'
        });
      });
      
      // Executa as atualiza√ß√µes
      await batch.commit();
      
      const equipamentosCount = equipamentosSnap.size;
      const tvboxCount = tvboxSnap.size;
      
      totalEquipamentosLiberados += equipamentosCount;
      totalTvBoxesLiberadas += tvboxCount;
      
      console.log(`  ‚úÖ ${equipamentosCount} equipamento(s) e ${tvboxCount} TV Box(es) liberados`);
    }
    
    // 4. Resumo final
    console.log('\nüìä RESUMO DA OPERA√á√ÉO:');
    console.log(`   ‚Ä¢ Clientes desativados verificados: ${clientesDesativados.length}`);
    console.log(`   ‚Ä¢ Equipamentos liberados: ${totalEquipamentosLiberados}`);
    console.log(`   ‚Ä¢ TV Boxes liberadas: ${totalTvBoxesLiberadas}`);
    console.log(`   ‚Ä¢ Total de itens liberados: ${totalEquipamentosLiberados + totalTvBoxesLiberadas}`);
    
    if (totalEquipamentosLiberados + totalTvBoxesLiberadas > 0) {
      console.log('\n‚úÖ Todos os equipamentos de clientes desativados foram liberados com sucesso!');
      console.log('   Eles agora est√£o dispon√≠veis para novos clientes.');
    } else {
      console.log('\n‚ÑπÔ∏è Nenhum equipamento precisava ser liberado.');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error);
    throw error;
  }
}

/**
 * Fun√ß√£o para verificar equipamentos √≥rf√£os (sem cliente associado)
 */
async function verificarEquipamentosOrfaos() {
  try {
    console.log('\nüîç Verificando equipamentos √≥rf√£os...');
    
    // Busca equipamentos sem cliente_id
    const equipamentosQuery = query(
      collection(db, 'equipamentos'),
      where('cliente_id', '==', null)
    );
    
    const equipamentosSnap = await getDocs(equipamentosQuery);
    
    // Busca TV Boxes sem cliente_id
    const tvboxQuery = query(
      collection(db, 'tvbox'),
      where('cliente_id', '==', null)
    );
    
    const tvboxSnap = await getDocs(tvboxQuery);
    
    console.log(`üìä Equipamentos dispon√≠veis: ${equipamentosSnap.size}`);
    console.log(`üìä TV Boxes dispon√≠veis: ${tvboxSnap.size}`);
    
    return {
      equipamentos: equipamentosSnap.size,
      tvboxes: tvboxSnap.size
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar equipamentos √≥rf√£os:', error);
    return { equipamentos: 0, tvboxes: 0 };
  }
}

// Executa o script
async function main() {
  try {
    console.log('üöÄ Iniciando script de verifica√ß√£o de equipamentos...\n');
    
    // Verifica equipamentos de clientes desativados
    await verificarEquipamentosClientesDesativados();
    
    // Verifica equipamentos √≥rf√£os
    await verificarEquipamentosOrfaos();
    
    console.log('\n‚úÖ Script executado com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Falha na execu√ß√£o do script:', error);
    process.exit(1);
  }
}

// Executa se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = {
  verificarEquipamentosClientesDesativados,
  verificarEquipamentosOrfaos
};
