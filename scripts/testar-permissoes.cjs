const admin = require('firebase-admin');
const serviceAccount = require('../service-account.json');

// Inicializar Firebase Admin
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

async function testarPermissoes() {
  try {
    console.log('üîç Testando sistema de permiss√µes...\n');
    
    // 1. Verificar usu√°rios existentes
    console.log('üìä 1. Verificando usu√°rios existentes:');
    const employeesSnap = await db.collection('employees').get();
    
    if (employeesSnap.empty) {
      console.log('‚ùå Nenhum usu√°rio encontrado');
      return;
    }
    
    for (const doc of employeesSnap.docs) {
      const employee = doc.data();
      console.log(`üë§ ${employee.name} (${employee.email}) - Cargo: ${employee.roleId}`);
    }
    
    // 2. Verificar roles existentes
    console.log('\nüìã 2. Verificando roles existentes:');
    const rolesSnap = await db.collection('roles').get();
    
    if (rolesSnap.empty) {
      console.log('‚ùå Nenhum role encontrado');
      return;
    }
    
    for (const doc of rolesSnap.docs) {
      const role = doc.data();
      console.log(`üé≠ ${role.name} - ${role.description}`);
      
      // Verificar permiss√µes do role
      if (role.permissions && Array.isArray(role.permissions)) {
        console.log(`   Permiss√µes: ${role.permissions.length} definidas`);
        role.permissions.forEach(perm => {
          console.log(`   - ${perm.module}:${perm.action} = ${perm.granted ? '‚úÖ' : '‚ùå'}`);
        });
      } else {
        console.log(`   ‚ö†Ô∏è  Sem permiss√µes definidas`);
      }
    }
    
    // 3. Verificar permiss√µes individuais
    console.log('\nüîê 3. Verificando permiss√µes individuais:');
    const permissionsSnap = await db.collection('permissions').get();
    
    if (permissionsSnap.empty) {
      console.log('‚ÑπÔ∏è  Nenhuma permiss√£o individual encontrada (normal)');
    } else {
      console.log(`üìù ${permissionsSnap.size} permiss√µes individuais encontradas:`);
      permissionsSnap.docs.forEach(doc => {
        const perm = doc.data();
        console.log(`   - ${perm.employeeId}: ${perm.module}:${perm.action} = ${perm.granted ? '‚úÖ' : '‚ùå'}`);
      });
    }
    
    // 4. Testar verifica√ß√£o de permiss√µes
    console.log('\nüß™ 4. Testando verifica√ß√£o de permiss√µes:');
    
    // Buscar um usu√°rio Admin
    const adminEmployee = employeesSnap.docs.find(doc => {
      const data = doc.data();
      return data.roleId === 'admin-role' || data.roleId === 'Admin';
    });
    
    if (adminEmployee) {
      const adminData = adminEmployee.data();
      console.log(`üëë Testando Admin: ${adminData.name}`);
      
      // Verificar se tem acesso a funcion√°rios
      const hasFuncionariosAccess = adminData.roleId === 'admin-role' || adminData.roleId === 'Admin';
      console.log(`   Acesso a Funcion√°rios: ${hasFuncionariosAccess ? '‚úÖ' : '‚ùå'}`);
      
      // Verificar se tem acesso a dashboard
      console.log(`   Acesso a Dashboard: ‚úÖ (todos t√™m)`);
    }
    
    // 5. Verificar estrutura de dados
    console.log('\nüèóÔ∏è  5. Verificando estrutura de dados:');
    
    // Verificar se employees t√™m roleId v√°lido
    let validEmployees = 0;
    let invalidEmployees = 0;
    
    for (const doc of employeesSnap.docs) {
      const employee = doc.data();
      const hasValidRole = employee.roleId && typeof employee.roleId === 'string';
      
      if (hasValidRole) {
        validEmployees++;
      } else {
        invalidEmployees++;
        console.log(`   ‚ö†Ô∏è  ${employee.name} sem roleId v√°lido`);
      }
    }
    
    console.log(`   ‚úÖ Funcion√°rios com role v√°lido: ${validEmployees}`);
    console.log(`   ‚ùå Funcion√°rios com role inv√°lido: ${invalidEmployees}`);
    
    // 6. Resumo e recomenda√ß√µes
    console.log('\nüìã RESUMO E RECOMENDA√á√ïES:');
    
    if (validEmployees === employeesSnap.size && rolesSnap.size > 0) {
      console.log('‚úÖ Sistema de permiss√µes est√° funcionando corretamente');
      console.log('‚úÖ Todos os usu√°rios t√™m roles v√°lidos');
      console.log('‚úÖ Roles est√£o definidos com permiss√µes');
    } else {
      console.log('‚ö†Ô∏è  Sistema de permiss√µes tem problemas:');
      
      if (invalidEmployees > 0) {
        console.log('   - Corrigir funcion√°rios sem roleId v√°lido');
      }
      
      if (rolesSnap.empty) {
        console.log('   - Criar roles padr√£o do sistema');
      }
    }
    
    console.log('\nüöÄ Sistema pronto para uso!');
    
  } catch (error) {
    console.error('‚ùå Erro ao testar permiss√µes:', error);
  } finally {
    process.exit(0);
  }
}

// Executar teste
testarPermissoes();

